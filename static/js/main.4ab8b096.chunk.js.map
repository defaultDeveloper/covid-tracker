{"version":3,"sources":["Component/Cards/cards.module.css","Component/Cards/cards.jsx","api/index.js","Component/Charts/charts.jsx","Component/CountryPicker/countrypicker.jsx","Component/News/news.jsx","App.js","serviceWorker.js","index.js","App.module.css","Component/News/news.module.css","Component/Charts/charts.module.css","Component/CountryPicker/countrypicker.module.css","images/image.png"],"names":["module","exports","Cards","theme","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","active","url","fetchData","country","a","finalUrl","axios","get","console","log","error","message","fetchDailyData","modifiedData","map","total","date","reportDate","fetchCountries","countries","name","fetchNews","articles","Charts","useState","dailyData","setDailyData","useEffect","fetchApi","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","scales","yAxes","plugins","datalabels","anchor","align","lineChart","length","borderColor","fill","Countrypicker","handleCountryChange","setCountries","defaultCountry","setDefaultCountry","FormControl","formControl","NativeSelect","onChange","e","target","index","key","News","news","setNews","article","description","App","check","setCheck","setData","setCountry","palette","type","setTheme","muiTheme","createMuiTheme","fetchedData","init","AntSwitch","withStyles","root","width","height","padding","switchBase","grey","transform","common","white","opacity","primary","main","thumb","boxShadow","track","border","borderRadius","checked","Switch","ThemeProvider","CssBaseline","image","src","covimage","alt","alignItems","newPaletteType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4ab8b096.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__2PVPY\",\"card\":\"cards_card__1Dva2\",\"infected\":\"cards_infected__1NSUE\",\"active\":\"cards_active__259--\",\"recovered\":\"cards_recovered__2lDwE\",\"deaths\":\"cards_deaths__19LlB\"};","import React from 'react'\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\nimport styles from './cards.module.css'\nimport CountUp from 'react-countup'\nimport cx from 'classnames'\n\nconst Cards = ({data:{confirmed,deaths,recovered,lastUpdate}},theme)=>{\n    if(!confirmed){\n        return 'loading....'\n    }\n\n    return( \n        <div className={styles.container}>\n            <Grid container spacing={0} justify= \"center\">\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                            start = {0}\n                            end = {confirmed.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            />\n                            </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Active COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.active)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Active</Typography>\n                        <Typography variant=\"h5\"><CountUp\n                            start = {0}\n                            end = {confirmed.value-recovered.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\"><CountUp\n                            start = {0}\n                            end = {recovered.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoverd COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\"><CountUp\n                            start = {0}\n                            end = {deaths.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Deaths due to COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\nexport const fetchData = async (country)=>{\n try {\n     let finalUrl=\"\"\n     if(country==='global'){\n         finalUrl=`${url}`\n    }else{\n         finalUrl=`${url}/countries/${country}`\n     }\n    const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(finalUrl)\n    console.log(confirmed)\n    return {confirmed,recovered,deaths,lastUpdate}\n } catch (error) {\n     console.error(error.message)\n }\n}\n\nexport const fetchDailyData = async ()=>{\n    try{\n        const {data} = await axios.get(`${url}/daily`)\n        const modifiedData = data.map(data=>{\n            return {\n                confirmed: data.confirmed.total,\n                deaths:data.deaths.total,\n                date :data.reportDate\n            }\n        })\n        return modifiedData\n    }\n    catch(error){\n    console.log(error.message)\n    }\n}\n\nexport const fetchCountries = async ()=>{\n    try{\n        const {data:{countries}} = await axios.get(`${url}/countries`)\n        return countries.map(country=> country.name)\n    }\n    catch(error){\n    console.log(error.message)\n    }\n}\n\nexport const fetchNews = async ()=>{\n    try{\n        const {data:{articles}} = await axios.get(`http://newsapi.org/v2/top-headlines?country=in&q=covid&apiKey=3999084e5a96495e98016330e0697eed`)\n        console.log(articles)\n        return articles\n    }\n    catch(error){\n    console.log(error.message)\n    }\n}\n","import React,{useEffect,useState} from 'react'\nimport {fetchDailyData} from '../../api'\nimport {Line,Bar} from 'react-chartjs-2'\nimport styles from './charts.module.css'\nimport 'chartjs-plugin-datalabels'\n\nconst Charts = ({data:{confirmed,recovered,deaths},country})=>{\n    const [dailyData,setDailyData] = useState([])\n    useEffect(()=>{\n        const fetchApi = async()=>{\n        setDailyData(await fetchDailyData())\n        }\n        fetchApi()\n    },[])\n\nconst barChart=(\n    confirmed ?\n    (<Bar\n        data = {{\n            labels:['Infected','Recovered','Deaths'],\n            datasets:[{\n                label:'People',\n                backgroundColor:[\n                    'rgba(0, 0, 255, 0.5)',\n                    'rgba(0,255,0, 0.5)',\n                    'rgba(255, 0, 0, 0.5)'],\n                data:[confirmed.value,recovered.value,deaths.value]\n            }]\n        }}\n        options={{\n            legend:{display:false},\n            title:{display:true, text:`${country}`},\n            scales: {\n                yAxes: [{\n                  display: false\n                }]\n            },\n            plugins: {\n                datalabels: {\n                   display: true,\n                   color: 'black',\n                   anchor:'end',\n                   align:'top'\n                }\n             }\n        }}\n    />):null\n)\nconst lineChart =(\n    dailyData.length\n     ?(<Line\n        data={{\n            labels:dailyData.map(({date})=>date),\n            datasets:[{\n                data : dailyData.map(({confirmed})=>confirmed),\n                label:'Infected',\n                borderColor:'#3333ff',\n                fill:true\n            },{\n                data : dailyData.map(({deaths})=>deaths),\n                label:'Deaths',\n                borderColor:'red',\n                backgroundColor:'rgba(255,0,0,0.5)',\n                fill:true\n         }]\n        }}\n        />):null)\n\n    return (\n        <div className={styles.container}>\n            {country!=='global' ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Charts\n","import React,{useEffect,useState} from 'react'\nimport styles from './countrypicker.module.css'\nimport {fetchCountries} from '../../api'\nimport {NativeSelect,FormControl} from '@material-ui/core'\n\nconst Countrypicker = ({handleCountryChange})=>{\n    const [countries,setCountries]=useState([])\n    const [defaultCountry,setDefaultCountry]=useState('India')\n    \n    useEffect(()=>{\n        (async function(){\n            setCountries(await fetchCountries())\n        }())\n    },[setCountries])\n\n    return (\n        <FormControl styles={styles.formControl}>\n            <NativeSelect value={defaultCountry} onChange={(e)=>{handleCountryChange(e.target.value)\n            setDefaultCountry(e.target.value)}}>\n                <option value=\"global\">Global</option>\n                {countries.map((country,index)=><option key={index} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default Countrypicker\n","import React, { useState, useEffect } from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\nimport styles from './news.module.css'\nimport { fetchNews } from '../../api'\nimport cx from 'classnames'\n\nconst News = () => {\n    const [news, setNews] = useState([])\n    \n    useEffect(() => {\n        (async function () {\n            setNews(await fetchNews())\n        }())\n    })\n\n    return (\n        <div className={styles.container}>\n            {news.map((article) => {\n                return (< Grid container spacing={0} justify=\"center\">\n                    <Grid item component={Card} md={12} className={styles.card}>\n                        <CardContent>\n                            <Typography variant=\"h6\" gutterBottom>{article.title}</Typography>\n                            <Typography color=\"textPrimary\">\n                                {article.description}\n                            </Typography>\n                        </CardContent>\n                    </Grid>\n                </Grid>)\n            })}\n        </div >\n    )\n}\n\nexport default News","import React, { useEffect, useState } from 'react'\nimport styles from './App.module.css'\nimport { Cards, Charts, Countrypicker,News } from './Component'\nimport { fetchData } from './api'\nimport covimage from './images/image.png'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Switch,Typography,Grid} from '@material-ui/core'\n\nconst App = () => {\n  \n  const [check, setCheck] = useState(false)\n  const [data, setData] = useState({})\n  const [country, setCountry] = useState('India')\n  const [theme, setTheme] = useState({\n    palette: {\n      type: \"light\"\n    }\n  })\n\n  const toggleDarkTheme = () => {\n    let newPaletteType = theme.palette.type === \"light\" ? \"dark\" : \"light\"\n    setTheme({\n      palette: {\n        type: newPaletteType\n      }\n    })\n    setCheck(check===true?false:true)\n  }\n\n  const muiTheme = createMuiTheme(theme)\n\n  useEffect(() => {\n    const init = async () => {\n      const fetchedData = await fetchData(country)\n      setData(fetchedData)\n      setCountry(country)\n    }\n    init()\n  }, [country])\n\n  const handleCountryChange = async (country) => {\n    console.log(country)\n    const fetchedData = await fetchData(country)\n    setData(fetchedData)\n    setCountry(country)\n  }\n \nconst AntSwitch = withStyles((theme) => ({\n  root: {\n    width: 28,\n    height: 16,\n    padding: 0,\n    display: 'flex',\n  },\n  switchBase: {\n    padding: 2,\n    color: theme.palette.grey[500],\n    '&$checked': {\n      transform: 'translateX(12px)',\n      color: theme.palette.common.white,\n      '& + $track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main,\n      },\n    },\n  },\n  thumb: {\n    width: 12,\n    height: 12,\n    boxShadow: 'none',\n  },\n  track: {\n    border: `1px solid ${theme.palette.grey[500]}`,\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.common.white,\n  },\n  checked: {},\n}))(Switch);\n\n  return (\n    <ThemeProvider theme={muiTheme}>\n      <CssBaseline />\n      <div className={styles.container}>\n        <img className={styles.image} src={covimage} alt=\"COVID-19\" />\n        <Typography component=\"div\">\n          <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n            <Grid item>Light</Grid>\n            <Grid item>\n              <AntSwitch checked={check} onChange={toggleDarkTheme}/>\n            </Grid>\n            <Grid item>Dark</Grid>\n          </Grid>\n        </Typography>\n        <Cards data={data} country={country} theme={theme} />\n        <Countrypicker handleCountryChange={handleCountryChange} />\n        <Charts data={data} country={country} />\n        <News/>\n      </div>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"news_container__3UPWy\",\"card\":\"news_card__bG0P6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__1PQp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countrypicker_formControl__7uCU0\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}