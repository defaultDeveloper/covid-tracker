{"version":3,"sources":["Component/Cards/cards.module.css","Component/Cards/cards.jsx","api/index.js","Component/Charts/charts.jsx","Component/CountryPicker/countrypicker.jsx","Component/globalStyles.js","Component/Themes.js","Component/Toggler.js","App.js","Component/useDarkMode.js","serviceWorker.js","index.js","App.module.css","Component/Charts/charts.module.css","Component/CountryPicker/countrypicker.module.css","images/image.png"],"names":["module","exports","Cards","theme","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","active","url","fetchData","country","a","finalUrl","axios","get","console","log","error","message","fetchDailyData","modifiedData","map","total","date","reportDate","fetchCountries","countries","name","Charts","useState","dailyData","setDailyData","useEffect","fetchApi","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","Countrypicker","handleCountryChange","setCountries","defaultCountry","setDefaultCountry","FormControl","formControl","NativeSelect","onChange","e","target","index","key","GlobalStyles","createGlobalStyle","body","lightTheme","toggleBorder","background","darkTheme","Button","styled","button","Toggle","toggleTheme","onClick","App","setData","setCountry","setTheme","setMode","mode","window","localStorage","setItem","localTheme","getItem","useDarkMode","themeToggler","themeMode","fetchedData","init","image","src","covimage","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c3a0d5e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__2PVPY\",\"card\":\"cards_card__1Dva2\",\"dark\":\"cards_dark__3kOJf\",\"infected\":\"cards_infected__1NSUE\",\"active\":\"cards_active__259--\",\"recovered\":\"cards_recovered__2lDwE\",\"deaths\":\"cards_deaths__19LlB\"};","import React from 'react'\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\nimport styles from './cards.module.css'\nimport CountUp from 'react-countup'\nimport cx from 'classnames'\n\nconst Cards = ({data:{confirmed,deaths,recovered,lastUpdate}},theme)=>{\n    if(!confirmed){\n        return 'loading....'\n    }\n\n    return( \n        <div className={styles.container}>\n            <Grid container spacing={1} justify= \"center\">\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                            start = {0}\n                            end = {confirmed.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            />\n                            </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of Active COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.active)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Active</Typography>\n                        <Typography variant=\"h5\"><CountUp\n                            start = {0}\n                            end = {confirmed.value-recovered.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\"><CountUp\n                            start = {0}\n                            end = {recovered.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoverd COVID-19 cases</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component = {Card} xs={12} md={2} className={cx(styles.card,styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textPrimary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\"><CountUp\n                            start = {0}\n                            end = {deaths.value}\n                            duration = {2.5}\n                            separator=\",\"\n                            /></Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Deaths due to COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards","import axios from 'axios'\n\nconst url = 'https://covid19.mathdro.id/api'\nexport const fetchData = async (country)=>{\n try {\n     let finalUrl=\"\"\n     if(country==='global'){\n         finalUrl=`${url}`\n    }else{\n         finalUrl=`${url}/countries/${country}`\n     }\n    const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(finalUrl)\n    console.log(confirmed)\n    return {confirmed,recovered,deaths,lastUpdate}\n } catch (error) {\n     console.error(error.message)\n }\n}\n\nexport const fetchDailyData = async ()=>{\n    try{\n        const {data} = await axios.get(`${url}/daily`)\n        const modifiedData = data.map(data=>{\n            return {\n                confirmed: data.confirmed.total,\n                deaths:data.deaths.total,\n                date :data.reportDate\n            }\n        })\n        return modifiedData\n    }\n    catch(error){\n    console.log(error.message)\n    }\n}\n\nexport const fetchCountries = async ()=>{\n    try{\n        const {data:{countries}} = await axios.get(`${url}/countries`)\n        return countries.map(country=> country.name)\n    }\n    catch(error){\n    console.log(error.message)\n    }\n}\n","import React,{useEffect,useState} from 'react'\nimport {fetchDailyData} from '../../api'\nimport {Line,Bar} from 'react-chartjs-2'\nimport styles from './charts.module.css'\n\nconst Charts = ({data:{confirmed,recovered,deaths},country})=>{\n    const [dailyData,setDailyData] = useState([])\n    useEffect(()=>{\n        const fetchApi = async()=>{\n        setDailyData(await fetchDailyData())\n        }\n        fetchApi()\n    },[])\n\nconst barChart=(\n    confirmed ?\n    (<Bar\n        data = {{\n            labels:['Infected','Recovered','Deaths'],\n            datasets:[{\n                label:'People',\n                backgroundColor:[\n                    'rgba(0, 0, 255, 0.5)',\n                    'rgba(0,255,0, 0.5)',\n                    'rgba(255, 0, 0, 0.5)'],\n                    data:[confirmed.value,recovered.value,deaths.value]\n            }]\n        }}\n        options={{\n            legend:{display:false},\n            title:{display:true, text:`${country}`}\n        }}\n    />):null\n)\nconst lineChart =(\n    dailyData.length\n     ?(<Line\n        data={{\n            labels:dailyData.map(({date})=>date),\n            datasets:[{\n                data : dailyData.map(({confirmed})=>confirmed),\n                label:'Infected',\n                borderColor:'#3333ff',\n                fill:true\n            },{\n                data : dailyData.map(({deaths})=>deaths),\n                label:'Deaths',\n                borderColor:'red',\n                backgroundColor:'rgba(255,0,0,0.5)',\n                fill:true\n         }]\n        }}\n        />):null)\n\n    return (\n        <div className={styles.container}>\n            {country!=='global' ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Charts\n","import React,{useEffect,useState} from 'react'\nimport styles from './countrypicker.module.css'\nimport {fetchCountries} from '../../api'\nimport {NativeSelect,FormControl} from '@material-ui/core'\n\nconst Countrypicker = ({handleCountryChange})=>{\n    const [countries,setCountries]=useState([])\n    const [defaultCountry,setDefaultCountry]=useState('India')\n    useEffect(()=>{\n        (async function(){\n            setCountries(await fetchCountries())\n        }())\n    },[setCountries])\n\n    return (\n        <FormControl styles={styles.formControl}>\n            <NativeSelect value={defaultCountry} onChange={(e)=>{handleCountryChange(e.target.value)\n            setDefaultCountry(e.target.value)}}>\n                <option value=\"global\">Global</option>\n                {countries.map((country,index)=><option key={index} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default Countrypicker\n","import { createGlobalStyle} from 'styled-components'\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n  `\n","export const lightTheme = {\n    body: '#FFF',\n    text: '#FBFBFB',\n    toggleBorder: '#FFF',\n    background: '#363537',\n}\nexport const darkTheme = {\n    body: '#363537',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    background: '#999',\n}\n","import React from 'react'\nimport { func, string } from 'prop-types';\nimport styled from \"styled-components\"\nconst Button = styled.button`\n  background: ${({ theme }) => theme.background};\n  border: 2px solid ${({ theme }) => theme.toggleBorder};\n  color: ${({ theme }) => theme.text};\n  border-radius: 30px;\n  cursor: pointer;\n  font-size:0.8rem;\n  padding: 0.6rem;\n  }\n  `;\nconst Toggle = ({theme,  toggleTheme }) => {\n    return (\n        <Button onClick={toggleTheme} >\n          Switch Theme\n        </Button>\n    );\n};\nToggle.propTypes = {\n    theme: string.isRequired,\n    toggleTheme: func.isRequired,\n}\nexport default Toggle;","import React,{useEffect,useState} from 'react'\nimport styles from './App.module.css'\nimport { Cards, Charts, Countrypicker } from './Component'\nimport { fetchData } from './api'\nimport covimage from './images/image.png'\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./Component/globalStyles\";\nimport { lightTheme, darkTheme } from \"./Component/Themes\"\nimport { useDarkMode } from \"./Component/useDarkMode\"\nimport Toggle from \"./Component/Toggler\"\n\nconst App = () => {\n    const [data, setData] = useState({})\n    const [country, setCountry] = useState('India')\n    const [theme, themeToggler] = useDarkMode();\n    const themeMode = theme === 'light' ? lightTheme : darkTheme;\n\n    useEffect(()=> {\n            const init = async() => {\n                const fetchedData = await fetchData(country)\n                setData(fetchedData)\n                setCountry(country)\n            }\n            init()\n        },[country])\n\n    const handleCountryChange = async (country) => {\n        console.log(country)\n        const fetchedData = await fetchData(country)\n        setData(fetchedData)\n        setCountry(country)\n    }\n\n        return (\n            <ThemeProvider theme={themeMode} >\n                <>\n                    <GlobalStyles />\n                    <div className={styles.container}>\n                        <img className={styles.image} src={covimage} alt=\"COVID-19\" />\n                        <Cards data={data} country={country} theme={theme}/>\n                        <Countrypicker handleCountryChange={handleCountryChange} />\n                        <Charts data={data} country={country} />\n                        <Toggle theme={theme} toggleTheme={themeToggler} />\n                    </div>\n                </>\n            </ThemeProvider>\n        )\n    }\n\nexport default App\n","import { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n    const [theme, setTheme] = useState('light');\n\n    const setMode = mode => {\n        window.localStorage.setItem('theme', mode)\n        setTheme(mode)\n    };\n\n    const themeToggler = () => {\n        theme === 'light' ? setMode('dark') : setMode('light')\n    };\n\n    useEffect(() => {\n        const localTheme = window.localStorage.getItem('theme');\n        localTheme && setTheme(localTheme)\n    }, []);\n    return [theme, themeToggler]\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"charts_container__1PQp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countrypicker_formControl__7uCU0\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}